import base45_swift
import Gzip
#if canImport(UIKit)
import UIKit
#else
import Foundation
#endif

/// Electronic Health Certificate Validation Core
///
/// This struct provides an interface for validating EHN Health certificates generated by https://dev.a-sit.at/certservice
public struct ValidationCore {
    private let PREFIX = "HC1:"

    private var completionHandler : ((ValidationResult) -> ())?
    #if canImport(UIKit)
    private var scanner : QrCodeScanner?
    #endif
    private let trustlistService : TrustlistService
    private let dateService : DateService

    public init(trustlistService: TrustlistService, dateService: DateService? = nil){
        self.dateService = dateService ?? DefaultDateService()
        self.trustlistService = trustlistService 
   }

    //MARK: - Public API
    
    #if canImport(UIKit)
    /// Instantiate a QR code scanner and validate the scannned EHN health certificate
    public mutating func validateQrCode(_ qrView : UIView, _ completionHandler: @escaping (ValidationResult) -> ()){
        self.completionHandler = completionHandler
        self.scanner = QrCodeScanner()
        scanner?.scan(qrView, self)
    }
    #endif
    
    /// Validate an Base45-encoded EHN health certificate
    public func validate(encodedData: String, _ completionHandler: @escaping (ValidationResult) -> ()) {
        print("Starting validation")
        guard let unprefixedEncodedString = removeScheme(prefix: PREFIX, from: encodedData) else {
            completionHandler(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .INVALID_SCHEME_PREFIX))
            return
        }
        
        guard let decodedData = decode(unprefixedEncodedString) else {
            completionHandler(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .BASE_45_DECODING_FAILED))
            return
        }
        print("Base45-decoded data: \(decodedData.humanReadable())")
        
        guard let decompressedData = decompress(decodedData) else {
            completionHandler(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .DECOMPRESSION_FAILED))
            return
        }
        print("Decompressed data: \(decompressedData.humanReadable())")

        guard let cose = cose(from: decompressedData),
              let keyId = cose.keyId else {
            completionHandler(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .COSE_DESERIALIZATION_FAILED))
            return
        }
        print("KeyID: \(keyId.encode())")
        
        guard let cwt = CWT(from: cose.payload),
              let euHealthCert = cwt.euHealthCert else {
            completionHandler(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .CBOR_DESERIALIZATION_FAILED))
            return
        }
        
        trustlistService.key(for: keyId, cwt: cwt, keyType: euHealthCert.type) { result in
            switch result {
            case .success(let key):
                guard cose.hasValidSignature(for: key) else {
                    completionHandler(ValidationResult(isValid: false, metaInformation: MetaInfo(from: cwt), greenpass: euHealthCert, error: .SIGNATURE_INVALID))
                    return
                }
                
                guard cwt.isValid(using: dateService) else {
                    completionHandler(ValidationResult(isValid: false, metaInformation: MetaInfo(from: cwt), greenpass: euHealthCert, error: .CWT_EXPIRED))
                    return
                }

                completionHandler(ValidationResult(isValid: true, metaInformation: MetaInfo(from: cwt), greenpass: euHealthCert, error: nil))
            case .failure(let error): completionHandler(ValidationResult(isValid: false, metaInformation: MetaInfo(from: cwt), greenpass: euHealthCert, error: error))
            }
        }
    }

    /// Manually trigger an update for the used trustlist
    public func updateTrustlist(completionHandler: @escaping (ValidationError?)->()) {
        trustlistService.updateTrustlistIfNecessary(completionHandler: completionHandler)
    }
    
    /// Decodes business rules and validates the detached signature
    public func decode(businessRules: Data, signature: Data, trustAnchor: String) throws ->  (SignatureInfo, BusinessRulesContainer) {
        return try DataDecoder().decode(businessRules: businessRules, signature: signature, trustAnchor: trustAnchor, dateService: self.dateService)
    }
    
    /// Decodes value sets and validates the detached signature
    public func decode(valueSet: Data, signature: Data, trustAnchor: String) throws -> (SignatureInfo, ValueSetContainer) {
        return try DataDecoder().decode(valueSets: valueSet, signature: signature, trustAnchor: trustAnchor, dateService: self.dateService)
    }

    //MARK: - Helper Functions

    /// Strips a given scheme prefix from the encoded EHN health certificate
    private func removeScheme(prefix: String, from encodedString: String) -> String? {
        guard encodedString.starts(with: prefix) else {
            print("Encoded data string does not seem to include scheme prefix: \(encodedString.prefix(prefix.count))")
            return nil
        }
        return String(encodedString.dropFirst(prefix.count))
    }
    
    /// Base45-decodes an EHN health certificate
    private func decode(_ encodedData: String) -> Data? {
        return try? encodedData.fromBase45()
    }
    
    /// Decompress the EHN health certificate using ZLib
    private func decompress(_ encodedData: Data) -> Data? {
        return try? encodedData.gunzipped()
    }

    /// Creates COSE structure from EHN health certificate
    private func cose(from data: Data) -> Cose? {
       return Cose(from: data)
    }
    
}

// MARK: - QrCodeReceiver
#if canImport(UIKit)
extension ValidationCore : QrCodeReceiver {
    public func canceled() {
        print("QR code scanning cancelled.")
        completionHandler?(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .USER_CANCELLED))
    }
    
    /// Process the scanned EHN health certificate
    public func onQrCodeResult(_ result: String?) {
        guard let result = result,
              let completionHandler = self.completionHandler else {
            print("Cannot read QR code.")
            self.completionHandler?(ValidationResult(isValid: false, metaInformation: nil, greenpass: nil, error: .QR_CODE_ERROR))
            return
        }
        validate(encodedData: result, completionHandler)
    }
}
#endif


